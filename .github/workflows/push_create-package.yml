# Unique name for this workflow
name: "[PUSH] Create Package"

# Definition when the workflow should run
on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - "force-app/**"

# Jobs to be executed
jobs:
  # ######################################## #
  # ############ CREATE PACKAGE ############ #
  # ######################################## #
  create-package:
    name: Create new package
    runs-on: ubuntu-latest
    outputs:
      packageVersionId: ${{ steps.extract-data-package-version-create.outputs.packageVersionId }}
    steps:
      # Install SFDX
      - name: Install SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Checkout the code in the pull request
      - name: "Checkout source code"
        uses: actions/checkout@v2

      # Authenticate prod
      - name: Authenticate prod
        run: |
          echo ${{ secrets.PROD_SFDX_URL}} > ./PROD_SFDX_URL.txt
          sfdx force:auth:sfdxurl:store -f ./PROD_SFDX_URL.txt -a devhub -d
          rm -f ./PROD_SFDX_URL.txt

      # Authenticate integration-sandbox
      - name: Authenticate integration-sandbox
        run: |
          echo ${{ secrets.INTEGRATION_SANDBOX_SFDX_URL}} > ./INTEGRATION_SANDBOX_SFDX_URL.txt
          sfdx force:auth:sfdxurl:store -f ./INTEGRATION_SANDBOX_SFDX_URL.txt -a integration-sandbox -s
          rm -f ./INTEGRATION_SANDBOX_SFDX_URL.txt

      # Create package version
      - name: "Create package version"
        id: package-version-create
        run: |
          sfdx force:package:version:create -f config/project-scratch-def.json -p $(cat sfdx-project.json | jq '.packageDirectories[0].package' -r) -k ${{ secrets.PACKAGE_KEY }} -w 90 -c --json | tee output
          echo "::set-output name=result::$(cat output | jq -c .)"

          status=$(cat output |jq '.status')
          if [ $status == "0" ]
          then
            echo "::set-output name=isSuccess::true"
          else
            exit 125
          fi
          rm output

      # Extract data from package version create result
      - name: "Extract package:version:create result data"
        id: extract-data-package-version-create
        uses: muenzpraeger/github-action-extract-sfdx-packaging-result@master
        with:
          json: ${{steps.package-version-create.outputs.result}}

      # Install new package version into integration org
      - name: "Install new package version into integration org"
        id: integration-installation
        run: |
          sfdx force:package:install --package ${{ steps.extract-data-package-version-create.outputs.packageVersionId }} -w 20 -b 20 -u integration-sandbox -r -k ${{ secrets.PACKAGE_KEY }} --json | tee output

          status=$(cat output |jq '.status')
          if [ $status == "0" ]
          then
            echo "::set-output name=isSuccess::true"
          fi
          rm output

      # set release variables
      - name: "Set release fields"
        if: success() || (failure() && steps.package-version-create.outputs.isSuccess && steps.extract-data-package-version-create.outputs.isSuccess )
        id: release-fields
        run: |
          versionNumber=$(cat sfdx-project.json | jq '.packageDirectories[0].versionNumber' -r | sed 's/.\{5\}$//')
          packageAliases=$(cat sfdx-project.json | jq '.packageAliases | keys_unsorted[-1]' -r | sed 's/.*-//')

          echo "::set-output name=tagName::v$(echo $versionNumber)-beta$(echo $packageAliases)"
          echo "::set-output name=releaseName::$(echo $versionNumber)-beta$(echo $packageAliases)"
          echo "::set-output name=bodyVersion::$(echo $versionNumber).$(echo $packageAliases)"
          echo "::set-output name=bodyPackage::${{ steps.extract-data-package-version-create.outputs.packageVersionId }}"
          echo "::set-output name=codeCoverage::$( sfdx force:package:version:report -p ${{ steps.extract-data-package-version-create.outputs.packageVersionId }} --json | jq '.result.CodeCoverage.apexCodeCoveragePercentage' -r )"

          echo "::set-output name=packageCreation::✅ Package Creation"

          if [ ${{ steps.integration-installation.outputs.isSuccess }} == "true" ]
          then
            echo "::set-output name=integrationInstallation::✅ Package Installation (Integration Sandbox)"
          else
            echo "::set-output name=integrationInstallation::❌ Package Installation (Integration Sandbox)"
          fi

      # Generate changelog from commits
      - name: Generate changelog
        if: success() || (failure() && steps.package-version-create.outputs.isSuccess && steps.extract-data-package-version-create.outputs.isSuccess )
        id: changelog
        uses: metcalfc/changelog-generator@v0.4.3
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      # create github release
      - name: "Create Release"
        if: success() || (failure() && steps.package-version-create.outputs.isSuccess && steps.extract-data-package-version-create.outputs.isSuccess )
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release-fields.outputs.tagName }}
          release_name: ${{ steps.release-fields.outputs.releaseName }}
          body: |
            **Version**: ${{ steps.release-fields.outputs.bodyVersion }}
            **Package ID**: ${{ steps.release-fields.outputs.bodyPackage }}
            **Code Coverage**: ${{ steps.release-fields.outputs.codeCoverage }}%

            **Author**: ${{ github.actor }}

            ${{ steps.release-fields.outputs.packageCreation }}
            ${{ steps.release-fields.outputs.integrationInstallation }}

            ## Changelog

            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: true

  # ######################################## #
  # ####### CHECK DEV SANDBOX DEPLOY ####### #
  # ######################################## #
  check-dev-sandbox-deploy:
    name: Check if DEPLOY_TO_DEV_AFTER_PACKAGE_CREATION is true
    runs-on: ubuntu-latest
    steps:
      - name: check DEPLOY_TO_DEV_AFTER_PACKAGE_CREATION secret
        id: checkSecret
        run: |
          echo "Enable: ${{ env.SECRET == '1' }}"
          echo "::set-output name=shouldContinue::${{ env.SECRET == '1' }}"
        env:
          SECRET: ${{ secrets.DEPLOY_TO_DEV_AFTER_PACKAGE_CREATION }}
    outputs:
      shouldContinue: ${{ steps.checkSecret.outputs.shouldContinue }}

  # ######################################## #
  # ######## DEPLOY PACKAGE TO DEV ######### #
  # ######################################## #
  deploy-package-to-dev:
    name: Deploy package to dev sandbox
    runs-on: ubuntu-latest
    needs: [create-package, check-dev-sandbox-deploy]
    if: ${{ needs.check-dev-sandbox-deploy.outputs.shouldContinue == 'true' }}
    steps:
      # Authorize SFDX
      - name: Authorize SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Checkout the code in the pull request
      - name: "Checkout source code"
        uses: actions/checkout@v2

      # Authenticate prod
      - name: Authenticate prod
        run: |
          echo ${{ secrets.PROD_SFDX_URL}} > ./PROD_SFDX_URL.txt
          sfdx force:auth:sfdxurl:store -f ./PROD_SFDX_URL.txt -a devhub -d
          rm -f ./PROD_SFDX_URL.txt

      # Authenticate dev sandbox
      - name: Authenticate dev sandbox
        run: |
          echo ${{ secrets.DEV_SFDX_URL}} > ./DEV_SFDX_URL.txt
          sfdx force:auth:sfdxurl:store -f ./DEV_SFDX_URL.txt -a dev -s
          rm -f ./DEV_SFDX_URL.txt

      # Install sfpowerkit plugin used to install multiple packages only by version number
      - name: "Install sfpowerkit plugin"
        run: "echo y | sfdx plugins:install sfpowerkit"

      # Get package keys
      - name: "Get package keys"
        id: install-keys
        run: |
          keys=""
          for p in $(jq '.result | .[].Name' -r <<< "$(sfdx force:package:list --json)"); do
              keys+=$p":${{ secrets.PACKAGE_KEY }} "
          done

          echo "::set-output name=keys::$(echo $keys)"

      # Install packages this repo is dependant on
      - name: "Install dependant packages"
        run: "sfdx sfpowerkit:package:dependencies:install -u dev -r -a -w 60 -k '${{ steps.install-keys.outputs.keys }}'"

      # Install package in dev sandbox
      - name: "Install package in dev sandbox org"
        run: "sfdx force:package:install --package ${{ needs.create-package.outputs.packageVersionId }} -k ${{ secrets.PACKAGE_KEY }} -u dev -w 10 -b 10 -r"

  # ######################################## #
  # ###### CHECK CODE COVERAGE SECRET ###### #
  # ######################################## #
  check-code-coverage-secret:
    name: Check valid CODECOV_TOKEN
    runs-on: ubuntu-latest
    steps:
      - name: check CODECOV_TOKEN secret 
        id: checkSecret
        run: |
          echo "Enable: ${{ env.SECRET != '' }}"
          echo "::set-output name=shouldContinue::${{ env.SECRET != '' }}"
        env:
          SECRET: ${{ secrets.CODECOV_TOKEN }}
    outputs:
      shouldContinue: ${{ steps.checkSecret.outputs.shouldContinue }}

  # ######################################## #
  # ########## CHECK CODE COVERAGE ######### #
  # ######################################## #
  check-code-coverage:
    name: Check Code Coverage
    needs: [check-code-coverage-secret]
    if: ${{ needs.check-code-coverage-secret.outputs.shouldContinue == 'true' }}
    runs-on: ubuntu-latest
    steps:
       # Install SFDX
      - name: Install SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Checkout the code in the pull request
      - name: "Checkout source code"
        uses: actions/checkout@v2

      # Authenticate prod
      - name: Authenticate prod
        run: |
          echo ${{ secrets.PROD_SFDX_URL}} > ./PROD_SFDX_URL.txt
          sfdx force:auth:sfdxurl:store -f ./PROD_SFDX_URL.txt -a devhub -d
          rm -f ./PROD_SFDX_URL.txt

      # Create scratch org
      - name: "Create scratch org"
        run: sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1 --json
   
      # Install sfpowerkit plugin used to install multiple packages only by version number
      - name: "Install sfpowerkit plugin"
        run: "echo y | sfdx plugins:install sfpowerkit"

      # Get package keys
      - name: "Get package keys"
        id: install-keys
        run: |
          keys=""
          for p in $(jq '.result | .[].Name' -r <<< "$(sfdx force:package:list --json)"); do
              keys+=$p":${{ secrets.PACKAGE_KEY }} "
          done
          echo "::set-output name=keys::$(echo $keys)"

      # Install packages this repo is dependant on
      - name: "Install dependant packages"
        run: "sfdx sfpowerkit:package:dependencies:install -u scratch-org -r -a -w 60 -k '${{ steps.install-keys.outputs.keys }}'"

      # Deploy source to scratch org
      - name: "Push source to scratch org"
        run: "sfdx force:source:push"

      # Get all test classes from current repo
      - name: Get all test classes from currentrepo
        id: test-classes-in-repo
        run: |
          classes=""
          for p in $( grep -r -l -i --include="*.cls" "@istest" . | sed 's@.*/@@' ); do
            classes+=$(echo $p | cut -f 1 -d '.')","
          done

          echo "::set-output name=classes::$( echo $classes | sed 's/\(.*\),/\1 /' )"

      # Run Apex tests in scratch org
      - name: "Run Apex tests"
        run: "sfdx force:apex:test:run -t ${{ steps.test-classes-in-repo.outputs.classes }} -c -r human -d ./tests/apex -w 20"

      # Upload code coverage data
      - name: "Upload code coverage for Apex to Codecov.io"
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      # Remove test result files
      - name: "Remove test result files"
        run: rm -rf ./tests

      # Housekeeping
      - name: "Delete scratch org"
        if: always()
        run: "sfdx force:org:delete -p -u scratch-org"
